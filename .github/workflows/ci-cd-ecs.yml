name: ci-cd-ecs

on:
  push:
    branches: ["main"]

# OIDC + read access for the repo
permissions:
  id-token: write
  contents: read

# Adjust if you like; these are safe to keep here (no secrets)
env:
  AWS_REGION: us-east-1
  ECR_REPO: scalable-webapp-repo   # matches your Terraform ECR repo

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    outputs:
      image-uri: ${{ steps.meta.outputs.IMAGE_URI }}

    steps:
      - uses: actions/checkout@v4

      # OIDC: assume your AWS role (no access keys needed)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::114091642196:role/github-cicd-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPO:${{ github.sha }} .

      # Optional but useful: scan the image
      - name: Security scan (Trivy)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Tag & push to ECR
        run: |
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          docker tag  $ECR_REPO:${{ github.sha }}  $REGISTRY/$ECR_REPO:${{ github.sha }}
          docker push $REGISTRY/$ECR_REPO:${{ github.sha }}

      - name: Set image URI output
        id: meta
        run: |
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

  deploy-staging:
    needs: [build-and-scan]
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::114091642196:role/github-cicd-role
          aws-region: ${{ env.AWS_REGION }}

      # Render task definition from a template that contains __IMAGE__
      - name: Render task definition
        run: |
          IMG="${{ needs.build-and-scan.outputs.image-uri }}"
          sed "s|__IMAGE__|${IMG}|g" ecs-taskdef-template.json > taskdef.json 

      - name: Update ECS service (staging)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: taskdef.json
          service: ${{ secrets.ECS_SERVICE_STAGING }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Integration test (health)
        run: |
          curl -fsSL "http://${{ secrets.ALB_DNS_STAGING }}/healthz" || (echo "Health check failed" && exit 1)

  deploy-prod:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment: production   # protect this env in GitHub for manual approval

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::114091642196:role/github-cicd-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Render task definition
        run: |
          IMG="${{ needs.build-and-scan.outputs.image-uri }}"
          sed "s|__IMAGE__|${IMG}|g" ecs-taskdef-template.json > taskdef.json

      - name: Update ECS service (prod)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: taskdef.json
          service: ${{ secrets.ECS_SERVICE_PROD }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      # Optional canary/weighted shift between blue/green TGs under the ALB listener
      - name: Canary shift example (20% green)
        run: |
          bash scripts/canary_shift.sh "${{ secrets.ALB_LISTENER_ARN }}" "${{ secrets.TG_BLUE_ARN }}" "${{ secrets.TG_GREEN_ARN }}" 80 20
jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.meta.outputs.IMAGE_URI }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::114091642196:role/github-cicd-role
          aws-region: us-east-1

      # ✅ PROVE we are logged in to AWS with the OIDC role
      - name: Who am I in AWS?
        run: |
          echo "AWS Region: $AWS_REGION"
          aws sts get-caller-identity

      # ✅ Make sure the ECR repo exists (you deleted it earlier)
      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPO" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
          aws ecr describe-repositories --repository-names "$ECR_REPO"

      # ✅ Log Docker into your private ECR registry
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, scan, push as before...
      - name: Build Docker image
        run: |
          docker build -t $ECR_REPO:${{ github.sha }} .

      - name: Security scan (Trivy)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Tag & push to ECR
        run: |
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          docker tag  $ECR_REPO:${{ github.sha }}  $REGISTRY/$ECR_REPO:${{ github.sha }}
          docker push $REGISTRY/$ECR_REPO:${{ github.sha }}

      - name: Set image URI output
        id: meta
        run: |
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"
